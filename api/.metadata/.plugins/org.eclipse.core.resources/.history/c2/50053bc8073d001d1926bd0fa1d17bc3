package com.example.compass.api.controller;

import java.util.List;
import java.util.Optional;

import javax.transaction.Transactional;
import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort.Direction;
import org.springframework.data.web.PageableDefault;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.util.UriComponentsBuilder;

import com.example.compass.api.controller.dto.EstadosDto;
import com.example.compass.api.modelo.Estados;
import com.example.compass.api.modelo.Regiao;
import com.example.compass.api.repository.EstadosRepository;

@RestController
@RequestMapping("api/v1/estados")
public class EstadosController {
	
	@Autowired
	private EstadosRepository estadosRepository;
		
	
	@GetMapping
	public Page<EstadosDto> lista(@RequestParam(required = false) String nomeRegiao,
			@PageableDefault(sort = {"populacao","area"}, direction = Direction.DESC, page = 0, size = 30) Pageable paginacao){
						
		if(nomeRegiao == null) {
			Page<Estados> estados = estadosRepository.findAll(paginacao);			
			return EstadosDto.converter(estados);
		}else {
			Page<Estados> estados = estadosRepository.findByRegiao(nomeRegiao, paginacao);			
			return EstadosDto.converter(estados);
		}		
	}
	/*
	@GetMapping
	public List<EstadosDto> lista(@RequestParam(required = false) Regiao nomeRegiao){				
		if(nomeRegiao == null) {
			List<Estados> estados = estadosRepository.findAll();	
			return EstadosDto.converter(estados);
		}else {			
						
			List<Estados> estados = estadosRepository.findByRegiao(nomeRegiao);			
			return EstadosDto.converter(estados); 
		}	
	}
	*/
	/*
	@GetMapping
	public List<EstadosDto> lista(boolean maiorArea){
		if(maiorArea == true) {
			List<Estados> estados = estadosRepository.findByMaiorArea();			
			return EstadosDto.converter(estados);
		}else {					
			List<Estados> estados = estadosRepository.findAll();			
			return EstadosDto.converter(estados);
		}				
	}
	*/
	/*
	@GetMapping("/{id}")
	public ResponseEntity<EstadosDto> encontrarPorId(@PathVariable Long id) {
		Optional<Estados> estados = estadosRepository.findById(id);
		System.out.println(estados);
		if(estados.isPresent()) {
			return ResponseEntity.ok(new EstadosDto(estados.get()));
		}else {
			return ResponseEntity.notFound().build();
		}		
	}
	*/
	/*
	@PostMapping
	@Transactional
	public ResponseEntity<EstadosDto> cadastrar(@RequestBody @Valid EstadosForm form, UriComponentsBuilder uriBuider) {
		Estados estados = form.converter(cursoRepository); 
		estadosRepository.save(estados);
		
		URI uri = uriBuider.path("api/v1/estados/{id}").buildAndExpand(estados.getId()).toUri();
		return ResponseEntity.created(uri).body(new EstadosDto(estados));		
	}

	@PutMapping("/{id}")
	@Transactional
	public ResponseEntity<EstadosDto> atualizar(@PathVariable Long id, @RequestBody @Valid AtualizacaoTopicoForm form){
		Optional<Estados> optional = estadosRepository.findById(id);
		if(optional.isPresent()) {
			Estados estados = form.atualizar(id, estadosRepository);	
			return ResponseEntity.ok(new EstadosDto(estados));

		}else {
			return ResponseEntity.notFound().build();
		}		
	}
	
	@DeleteMapping("/{id}")
	@Transactional
	public ResponseEntity<?> remover(@PathVariable Long id){
		Optional<Estados> optional = estadosRepository.findById(id);
		if(optional.isPresent()) {
			estadosRepository.deleteById(id);		
			return ResponseEntity.ok().build();

		}else {
			return ResponseEntity.notFound().build();
		}
	*/
}
